From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Luke Chambers <consolelogluke@gmail.com>
Date: Wed, 26 Apr 2023 22:15:36 -0400
Subject: [PATCH] Add registry client


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a68ccce5be03e847116519e152945f88dab71d3c..acf81301409cc1e2990cd41b34b6397c50d1e97f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -295,6 +295,8 @@ public final class CraftServer implements Server {
     public static Exception excessiveVelEx; // Paper - Velocity warnings
     private final io.papermc.paper.logging.SysoutCatcher sysoutCatcher = new io.papermc.paper.logging.SysoutCatcher(); // Paper
     private final CraftPotionBrewer potionBrewer = new CraftPotionBrewer(); // Paper
+    private sh.lpx.cardstock.registry.RegistryClient registryClient; // Cardstock
+    private final sh.lpx.cardstock.CardstockRegistryImpl cardstockRegistry = new sh.lpx.cardstock.CardstockRegistryImpl(() -> this.registryClient); // Cardstock
 
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
@@ -315,6 +317,20 @@ public final class CraftServer implements Server {
         this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();
         this.structureManager = new CraftStructureManager(console.getStructureManager());
 
+        // Cardstock start
+        sh.lpx.cardstock.registry.packet.client.ClientHandshakePacket handshake =
+            new sh.lpx.cardstock.registry.packet.client.ClientHandshakePacket(this.getVersion());
+        try {
+            this.registryClient = sh.lpx.cardstock.registry.RegistryClient.connect("127.0.0.1:15656", handshake);
+        } catch (IOException e) {
+            throw new RuntimeException("Failed to connect to the registry server.", e);
+        }
+
+        Thread registryClientThread = new Thread(this.registryClient::run, "registry-client");
+        registryClientThread.setDaemon(true);
+        registryClientThread.start();
+        // Cardstock end
+
         Bukkit.setServer(this);
 
         // Register all the Enchantments and PotionTypes now so we can stop new registration immediately after
@@ -2915,4 +2931,11 @@ public final class CraftServer implements Server {
     }
 
     // Paper end
+
+    // Cardstock start
+    @Override
+    public sh.lpx.cardstock.CardstockRegistry getCardstockRegistry() {
+        return this.cardstockRegistry;
+    }
+    // Cardstock end
 }
diff --git a/src/main/java/sh/lpx/cardstock/CardstockRegistryImpl.java b/src/main/java/sh/lpx/cardstock/CardstockRegistryImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..8e09eb8044f0a98ae695af450ce4b40fded66110
--- /dev/null
+++ b/src/main/java/sh/lpx/cardstock/CardstockRegistryImpl.java
@@ -0,0 +1,103 @@
+package sh.lpx.cardstock;
+
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import sh.lpx.cardstock.registry.RegisterResponse;
+import sh.lpx.cardstock.registry.RegistryClient;
+import sh.lpx.cardstock.registry.packet.client.*;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.function.Supplier;
+
+public class CardstockRegistryImpl
+    implements CardstockRegistry
+{
+    private final Logger logger = LoggerFactory.getLogger(CardstockRegistryImpl.class);
+
+    private final Supplier<@NotNull RegistryClient> client;
+    private Plugin selected;
+
+    private final SelectedPlugin selectedInstance = this.new SelectedPluginImpl();
+
+    public CardstockRegistryImpl(@NotNull Supplier<@NotNull RegistryClient> client) {
+        this.client = client;
+    }
+
+    @Override
+    public @NotNull SelectedPlugin selectPlugin(@NotNull Plugin plugin) {
+        this.selectPlugin(plugin, false);
+        return this.selectedInstance;
+    }
+
+    @Override
+    public @NotNull SelectedPlugin selectPluginInitially(@NotNull Plugin plugin) {
+        this.selectPlugin(plugin, true);
+        return this.selectedInstance;
+    }
+
+    private void selectPlugin(@NotNull Plugin plugin, boolean initialSelect) {
+        if (this.selected == plugin) {
+            return;
+        }
+        this.selected = plugin;
+
+        String authors;
+        if (initialSelect) {
+            List<String> authorList = plugin.getPluginMeta().getAuthors();
+            authors = switch (authorList.size()) {
+                case 0 -> "plugin authors";
+                case 1 -> authorList.get(0);
+                default -> authorList.get(0) + " + others";
+            };
+        } else {
+            authors = null;
+        }
+        ClientPacket packet = new ClientSelectPluginPacket(plugin.getName(), authors);
+        this.sendPacket(packet);
+    }
+
+    private class SelectedPluginImpl
+        implements SelectedPlugin
+    {
+        @Override
+        public void enable() {
+            ClientPacket packet = new ClientEnablePluginPacket();
+            CardstockRegistryImpl.this.sendPacket(packet);
+        }
+
+        @Override
+        public void disable() {
+            ClientPacket packet = new ClientDisablePluginPacket();
+            CardstockRegistryImpl.this.sendPacket(packet);
+        }
+
+        @Override
+        public @NotNull CmdRegisterResult registerCmd(@NotNull String name) {
+            ClientPacket packet = new ClientRegisterCmdPacket(name);
+            CardstockRegistryImpl.this.sendPacket(packet);
+
+            RegisterResponse.Complete response = CardstockRegistryImpl.this.client.get().takeRegisterResponse();
+            RegisterResponse.Msg[] msgs = response.msgs();
+            if (msgs.length != 0) {
+                Logger pluginLogger = CardstockRegistryImpl.this.selected.getSLF4JLogger();
+                for (RegisterResponse.Msg msg : msgs) {
+                    msg.logFn().accept(pluginLogger, msg.contents());
+                }
+            }
+            return CmdRegisterResult.fromDenied(response.denied());
+        }
+    }
+
+    private void sendPacket(@NotNull ClientPacket packet) {
+        RegistryClient client = this.client.get();
+        try {
+            client.sendPacket(packet);
+        } catch (IOException e) {
+            this.logger.warn("Failed to send a packet.", e);
+            this.logger.warn("Attempted packet for previous warning: {}", packet);
+        }
+    }
+}
